<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<umbPackage>
  <files>
    <file>
      <guid>uHateoas.dll</guid>
      <orgPath>/bin</orgPath>
      <orgName>uHateoas.dll</orgName>
    </file>
  </files>
  <info>
    <package>
      <name>uHateoas</name>
      <version>1.3.2</version>
      <license url="http://opensource.org/licenses/MIT">MIT License</license>
      <url>uhateoas.wg2k.com</url>
      <requirements>
        <major>3</major>
        <minor>0</minor>
        <patch>0</patch>
      </requirements>
    </package>
    <author>
      <name>Martin Willis</name>
      <website>www.wg2k.com</website>
    </author>
    <readme><![CDATA[Umbraco Hypermedia As The Engine Of Application State
-----------------------------------------------------------------------------------

Umbraco REST Hypermedia API.

We all love using Umbraco to build our websites, web & mobile apps, but not all of us have C# skills. Umbraco & uHateoas provide us with an intuitive web based UI to define, capture and maintain entities, relationships and rules for our content in an intuitive non technical interface, now coupled with a queryable, updatable Hypermedia REST API.

Project Site : http://uhateoas.wg2k.com
GitHub : https://github.com/uhateoas/uhateoas

When it comes to taking our content and using it on websites, mobile hybrid apps or anywhere you can dream of, it assumes a certain level of understanding of the ASP.NET stack, Webforms, MVC, Razor, Web API etc. 

This is not a problem for any ASP.NET developer, but what about someone that is great at HTML, CSS and Javascript and doesn't know or care about ASP.NET? 

At the moment you would need a ASP.NET developer to expose selected functionality and data via a custom written Web API, that would expose certain parts of the data stored in Umbraco. 
This could then be consumed by the front-end developer via the custom REST based API that the ASP.NET developer produced. 
With UHATEOAS, this is not necessary.

Simply install the UHATEOAS package and your Umbraco content is now automatically discoverable, navigable, query-able, page-able and editable via a standard Hypermedia API that is driven by the Document Types, DataTypes, Structure, Rules and User / Member Access Control that you define through the Umbraco Back-Office. 
Installation

Simply install the uHateoas package from the Project's section on Our Umbraco 

That's it, you are ready to rock! You are now able to query your Umbraco website using any REST client i.e. Advanced REST Client, Postman, Paw, Insomnia and of course via JavaScript using any of the JavaScript library's out there like jQuery, AngularJS, Polymer, Knockout, React etc. 


Content-Type Request Headers

We wanted the uHateoas API to be intuitive and easy to use ideally without any prior experience and with minimal or no documentation. That sounds typical of a lazy developer speaking, but Hypermedia As The Engine Of Application State really does deliver in this regard. Think of a website with lots of pages, with lots of relevant information, but with no hyper-links and no forms for accepting feedback. The web would never have taken off! 
So why make API's black boxes that need documentation just in order to use them? Why not simply surf to the web-site and specify the Content-Type Header that you would like to get the web-site's data returned to you in! By default if you don't specify a Content-Type Header, as you would expect you will simply get back HTML. If however you specify a different Content-Type Header instead of the default text/html, wouldn't it be great to get back the raw data of that resource in the format that you want it? 
This means that any page on your Umbraco web-site can now be served up in whatever format you support, via the URL that you would normally use on the web-site, simply by changing the Content-Type Header in the request. 


General Usage

As mentioned if you specify a Content-Type such as text/umbraco+json or text/json or text/xml, then all you need is to supply the starting point in your web-site, i.e. the starting URL. If you want access to all the content, start at the root of your web-site, if not, specify a more specific URL. Unlike most API's, you don't need to know or be told to use a specific API endpoint, you simply use the one you already know from surfing your web-site! 


Querying Umbraco

This is where the API really shines. It can be used to query, segment, filter and page your content in a SQL/LINQ like way using simple name-value pair switches. These name/value pairs should be recognised by the average Umbraco developer, as they are concepts that you use every day when building sites using Razor. Now you can just use them directly via the URL as a set of URL based parameters! 


Editing Umbraco

The POST verb allows you to do CRUD operations using IContent via the Content Service when logged in as an Umbraco Back-Office User.]]></readme>
  </info>
  <DocumentTypes />
  <Templates>
    <Template>
      <Name>ueditor</Name>
      <Alias>ueditor</Alias>
      <Design><![CDATA[@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    Layout = null;
}<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>uHateoas Editor - @(Model.Content.Name)</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="http://uhateoas.wg2k.com/css/styles.min.css" rel="stylesheet" media="screen" />
    <link href="http://uhateoas.wg2k.com/lib/codemirror.min.css" rel="stylesheet" />
    <link href="http://uhateoas.wg2k.com/addon/fold/foldgutter.min.css" rel="stylesheet" />
    <style>
        html {
            overflow-y: scroll;
        }

        body {
            background-color: #fff;
        }

        .editorStart {
            clear: left;
            margin-top: 40px;
        }

        .noborder {
            border-bottom: 0;
        }
    </style>
</head>
<body id="to_the_top">
    <div class="sourrounding_all on_frontpage ">
        <div class="joobstrab_area main_area">
            <div class="joobstrap_section sourrounding_wrapper noborder" id="main_center">
                <div class="playground_wrapper">
                    <div class="container">
                        <h1><span class="navbar-brand"></span>uHateoas Editor</h1>
                        <div class="row editorStart">
                            <div class="col-md-12 main_center">
                                <div class="row">
                                    <div class="col-md-12 main_component_area">
                                        <!--start of editor-->
                                        <div class="container-fluid">
                                            <form>
                                                <div class="row">
                                                    <div class="form-group col-md-12">
                                                        <label title="The RESTful Url and Query Parameters that are submitted to the API">End-Point Url:</label>
                                                        <div class="input-group">
                                                            <span class="input-group-addon" id="basic-addon1">@(Request.Url.ToString().Replace("/ueditor", ""))</span>
                                                            <input type="text" id="url" disabled="disabled" class="play-input form-control" style="background-color:#fff" placeholder="" />
                                                        </div>

                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="row">
                                                            <div class="form-group col-md-6 fancyDropdown">
                                                                <label title="Optional comma separated list of Descendants by DocTypeAlias, returned as Entities">Descendants:</label><br />
                                                                <select id="descendants" class="play-input param" multiple="multiple"></select>
                                                            </div>
                                                            <div class="form-group col-md-6 fancyDropdown">
                                                                <label title="Optional comma separated list of Property names to filter Properties by">Select:</label><br />
                                                                <select id="select" class="play-input param" multiple="multiple"></select>
                                                            </div>
                                                        </div>
                                                        <div class="form-group">
                                                            <label title="Return all Child Entities">Children:</label>
                                                            <select id="children" class="play-input form-control param">
                                                                <option value="">None selected</option>
                                                                <option value="true">Show Child Nodes as Entities</option>
                                                            </select>
                                                        </div>
                                                        <div class="form-group">
                                                            <label title="Optional filter criteria for Entities returned">Where:</label>
                                                            <input type="text" id="where" class="play-input form-control param" />
                                                        </div>
                                                        <div class="row">
                                                            <div class="form-group col-md-6">
                                                                <label title="Number of records from the start to skip">Skip:</label>
                                                                <input type="number" id="skip" class="play-input form-control param" />
                                                            </div>
                                                            <div class="form-group col-md-6">
                                                                <label title="Number of records to show">Take:</label>
                                                                <input type="number" id="take" class="play-input form-control param" />
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="form-group col-md-6 fancyDropdown">
                                                                <label title="Optional comma separated list of Property names to resolve NiceUrl from Media">Resolve Media:</label><br />
                                                                <select id="resolvemedia" class="play-input param" multiple="multiple"></select>
                                                            </div>
                                                            <div class="form-group col-md-6 fancyDropdown">
                                                                <label title="Optional comma separated list of Property names to resolve Content, returned as Entities">Resolve Content:</label><br />
                                                                <select id="resolvecontent" class="play-input param" multiple="multiple"></select>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="form-group col-md-6">
                                                                <label title="Strip out HTML tags if found in any Property">Html:</label>
                                                                <select id="html" class="play-input form-control param">
                                                                    <option value="">None selected</option>
                                                                    <option value="false">Strip out HTML tags</option>
                                                                </select>
                                                            </div>
                                                            <div class="form-group col-md-6">
                                                                <label title="Specify the Content-Type to send to the API">Content-Type:</label>
                                                                <select id="contenttype" class="play-input form-control">
                                                                    <option value="text/umbraco+json">text/umbraco+json</option>
                                                                    <option value="text/json">text/json</option>
                                                                    <option value="text/xml">text/xml</option>
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div id="playeditor" class="editor"></div>
                                                    </div>
                                                </div>
                                            </form>
                                        </div>
                                        <!--en of editor-->
                                    </div>
                                </div>
                            </div>
                        </div>
                        <p>
                            <small>Created and designed by <a href="http://www.WG2K.com" target="_blank">WG2K.com</a>  With help from <a href="http://www.Umbraco.com">Umbraco</a></small> <br />
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="http://uhateoas.wg2k.com/scripts/essentials.min.js"></script>
    <script src="http://uhateoas.wg2k.com/lib/codemirror.min.js"></script>
    <script src="http://uhateoas.wg2k.com/addon/fold/fold.min.js"></script>
    <script src="http://uhateoas.wg2k.com/lib/util/formatting.min.js"></script>
    <script src="http://uhateoas.wg2k.com/mode/css/css.js"></script>
    <script src="http://uhateoas.wg2k.com/mode/xml/xml.js"></script>
    <script src="http://uhateoas.wg2k.com/mode/javascript/javascript.js"></script>
    <script src="http://uhateoas.wg2k.com/mode/htmlmixed/htmlmixed.js"></script>
    <script src="http://uhateoas.wg2k.com/scripts/scripts.min.js"></script>
</body>
</html>]]></Design>
    </Template>
    <Template>
      <Name>uhateoas</Name>
      <Alias>uhateoas</Alias>
      <Design><![CDATA[@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using wg2k.umbraco
@((new uHateoas(Model)).Process())]]></Design>
    </Template>
    <Template>
      <Name>ujson</Name>
      <Alias>ujson</Alias>
      <Design><![CDATA[@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using wg2k.umbraco
@(new uHateoas(Model, true).Process())]]></Design>
    </Template>
    <Template>
      <Name>uxml</Name>
      <Alias>uxml</Alias>
      <Design><![CDATA[@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using wg2k.umbraco
@((new uHateoas(Model, true)).Process("root"))]]></Design>
    </Template>
  </Templates>
  <Stylesheets />
  <Macros />
  <DictionaryItems />
  <Languages />
  <DataTypes />
</umbPackage>