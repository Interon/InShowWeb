//This file is generated by gulp any changes will be deleted !!/// <reference path="Profile/AgentDetailsView.html" />
//Rdash


angular.module('RDash', ['ui.bootstrap', 'ui.router', 'ngCookies', 'angularFileUpload',
                         'ngResource', 'ngRoute', 'angular-loading-bar', 'ngAnimate', 'xeditable',
                         'ngFileUpload', 'ngImgCrop', 'toaster', 'formly', 'formlyBootstrap', 'ngDialog', 'ngMessages']);

/**
 * Route configuration for the RDash module.
 */
angular.module('RDash').config(['$stateProvider', '$urlRouterProvider',  'ngDialogProvider','cfpLoadingBarProvider',
    function ($stateProvider, $urlRouterProvider, ngDialogProvider) {
        ngDialogProvider.setDefaults({
            className: 'ngdialog-theme-default',
            plain: false,
            showClose: true,
            closeByDocument: true,
            closeByEscape: true,
            appendTo: false,
            preCloseCallback: function () {
                console.log('default pre-close callback');
            }
        });
        // For unmatched routes
        $urlRouterProvider.otherwise('/');

        // Application routes
        $stateProvider
            .state('index', {
                url: '/',
                templateUrl: '/templates/template.html'
            })
            .state('dashboard', {
                url: '/dashboard',
                templateUrl: '/templates/dashboard.html'
            })
             .state('profile', {
                 url: '/profile',
                 templateUrl: '/assets/js/rdash/Profile/AgentDetailsView.html'
             })
             .state('listings', {
                 url: '/listings',
                 templateUrl: '/templates/listings.html'
             })
        .state('inshow', {
            url: '/inshow',
            templateUrl: '/templates/template.html'
        });
    }
]);


angular.module('RDash').config(['ngDialogProvider', function (ngDialogProvider) {
    ngDialogProvider.setDefaults({
        className: 'ngdialog-theme-default',
        plain: false,
        showClose: true,
        closeByDocument: true,
        closeByEscape: true,
        appendTo: false,
        preCloseCallback: function () {
            console.log('default pre-close callback');
        }
    });
}]);


angular.module('RDash').run(function ($rootScope, $state, editableOptions) {

    editableOptions.theme = 'bs3';
});


//Formly Configuration for Validation


angular.module('RDash').config(function (formlyConfigProvider) {

    formlyConfigProvider.setWrapper({
        name: 'loader',
        template: [
          '<formly-transclude></formly-transclude>',
          '<span class="glyphicon glyphicon-refresh loader" ng-show="to.loading"></span>'
        ].join(' ')
    });

    formlyConfigProvider.setType({
        name: 'input-loader',
        extends: 'input',
        wrapper: ['loader']
    });

    formlyConfigProvider.setWrapper({
        template: '<formly-transclude></formly-transclude><div my-messages="options"></div>',
        types: ['input', 'checkbox', 'select', 'textarea', 'radio', 'input-loader']
    });
})
  .directive('myMessages', function () {
      return {
          templateUrl: 'custom-messages.html',
          scope: { options: '=myMessages' }
      };
  });




angular.module('RDash').controller('MasterCtrl', ['$scope', '$cookieStore', '$rootScope', '$state',  'fMember', function ($scope, $cookieStore, $rootScope, $state,  fMember) {

   
    $scope.member = fMember;
    /**
     * Sidebar Toggle & Cookie Control
     */
    var mobileView = 992;
    $scope.showSpinner = false;
    $scope.getWidth = function () {
        return window.innerWidth;
    };

    $scope.$watch($scope.getWidth, function (newValue, oldValue) {
        if (newValue >= mobileView) {
            if (angular.isDefined($cookieStore.get('toggle'))) {
                $scope.toggle = !$cookieStore.get('toggle') ? false : true;
            } else {
                $scope.toggle = true;
            }
        } else {
            $scope.toggle = false;
        }

    });

    $scope.toggleSidebar = function () {
        $scope.toggle = !$scope.toggle;
        $cookieStore.put('toggle', $scope.toggle);
    };

    window.onresize = function () {
        $scope.$apply();
    };
}]);



angular.module('RDash').controller('ProfileTabs', function ($scope, $window) {
    $scope.tabs = [
      { title: 'Dynamic Title 1', content: 'Dynamic content 1' },
      { title: 'Dynamic Title 2', content: 'Dynamic content 2', disabled: true }
    ];

    $scope.alertMe = function () {
        setTimeout(function () {
            $window.alert('You\'ve selected the alert tab!');
        });
    };

    $scope.model = {
        name: 'Tabs'
    };
});
angular.module('RDash').controller('ModalDemoCtrl', function ($scope, $uibModal, $log) {
    debugger;
    $scope.items = ['item1', 'item2', 'item3'];

    $scope.animationsEnabled = true;

    $scope.open = function (size) {

        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'myModalContent.html',
            controller: 'ModalInstanceCtrl',
            size: size,
            resolve: {
                items: function () {
                    return $scope.items;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            $scope.selected = selectedItem;
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });
    };

    $scope.toggleAnimation = function () {
        $scope.animationsEnabled = !$scope.animationsEnabled;
    };

});





angular.module('RDash').directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};
/**
 * Widget Body Directive
 */

angular.module('RDash').directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '@?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Footer Directive
 */

angular.module('RDash').directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right col-xs-6 col-sm-4" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('RDash')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};




angular.module('RDash').factory("appService", function () {
    var isEmpty = function (obj) {
        var name;
        for (name in obj) {
            return false;
        }
        return true;
    };
    function ccc(obj1, obj2) {
      
        if (obj1 === null) {
            return obj2;
        }
        if (obj2 === null) {
            return obj1;
        }
        var ret = {}, rett;
        for (var i in obj2) {
            rett = {};
            if (typeof obj2[i] === 'object') {
                rett = ccc(obj1[i], obj2[i]);
                if (!isEmpty(rett)) {
                    ret[i] = rett
                }
            } else {
                if (!obj1 || !obj1.hasOwnProperty(i) || obj2[i] !== obj1[i]) {
                    ret[i] = obj2[i];
                }
            }
        }
        return ret;
    }
    return {
        compareJsonObjects: function (obj1, obj2) {

            var ret = {}, rett;
            for (var i in obj2) {
                rett = {};
                if (typeof obj2[i] === 'object') {
                   
                    rett = ccc(obj1[i], obj2[i]);
                    if (!isEmpty(rett)) {
                        ret[i] = rett
                    }
                } else {
                    if (!obj1 || !obj1.hasOwnProperty(i) || obj2[i] !== obj1[i]) {
                        ret[i] = obj2[i];
                    }
                }
            }
            return ret;
        }
    }
});
angular.module('RDash').controller('agentdetailscontroller', ['$scope', 'fMember', 'appService', 'fMembership','ngDialog', function ($scope, fMember, appService, fMembership,ngDialog) {


    $scope.multifile = true;
    $scope.ChangePassword = function () {
       
        ngDialog.open({
            template: '/assets/js/rdash/Shared/Membership/PasswordChange.view.html',
            className: 'ngdialog-theme-plain'
        });
        
    }


    $scope.AddAgent = function () {
        //$rootScope.theme = 'ngdialog-theme-plain custom-width';

        ngDialog.open({
            template: '/assets/js/rdash/Shared/Membership/addAgent.view.html',
            className: 'ngdialog-theme-plain custom-width',
            closeByDocument: false
        });
    };


    $scope.ImageUploadClick = function () {
       
        ngDialog.open({
            template: '/assets/js/rdash/Shared/FileUpload/fileUpload.view.html',
            className: 'ngdialog-theme-plain',
            scope: $scope,
            
        });
        
    }




        $scope.member = fMember;
        //$scope.updateUser = function (data) {
        //    debugger;
        //    return $http.post('/updateUser', { id: $scope.user.id, name: data });
        //};
        $scope.$watch(
                    "member",
                    function handleMemberChange(newValue, oldValue) {
                        if (newValue.Id != 0 && oldValue.Id != 0) {
                            if (!angular.equals(newValue, oldValue)) {
                                var newJson = angular.toJson(newValue);
                                var oldJson = angular.toJson(oldValue);
                               
                                var difference = appService.compareJsonObjects(oldValue, newValue)
                                fMembership.UpdateMember(oldValue.Id, difference);
                            }
                        }
                        
                    }
                ,true);
      
}]);
angular.module('RDash').controller('FileUploadController', ['$scope', 'FileUploader', 'fMember', function ($scope, FileUploader, fMember) {


   
    //for umbraco purposes I added :
    //Type = member || content  
    //NodeId NodeId of member or content
    //PropertyAlias = ""
    //DataType = array or string or url
    $scope.multifile = $scope.$parent.multifile;
   
    $scope.fileUploadObj = { Type: "member", NodeId: fMember.Id, PropertyAlias: "logo", DataType: "string" };
    var uploader = $scope.uploader = new FileUploader({
        url: '/Umbraco/Api/FileApi/Upload',
        formData: [$scope.fileUploadObj]
    });

    // FILTERS

    uploader.filters.push({
        name: 'imageFilter',
        fn: function (item /*{File|FileLikeObject}*/, options) {
            var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
            return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
        }
    });

    // CALLBACKS

    uploader.onWhenAddingFileFailed = function (item /*{File|FileLikeObject}*/, filter, options) {
        console.info('onWhenAddingFileFailed', item, filter, options);
    };
    uploader.onAfterAddingFile = function (fileItem) {
        console.info('onAfterAddingFile', fileItem);
    };
    uploader.onAfterAddingAll = function (addedFileItems) {
        console.info('onAfterAddingAll', addedFileItems);
    };
    uploader.onBeforeUploadItem = function (item) {
        console.info('onBeforeUploadItem', item);
    };
    uploader.onProgressItem = function (fileItem, progress) {
        console.info('onProgressItem', fileItem, progress);
    };
    uploader.onProgressAll = function (progress) {
        console.info('onProgressAll', progress);
    };
    uploader.onSuccessItem = function (fileItem, response, status, headers) {
        console.info('onSuccessItem', fileItem, response, status, headers);
    };
    uploader.onErrorItem = function (fileItem, response, status, headers) {
        console.info('onErrorItem', fileItem, response, status, headers);
    };
    uploader.onCancelItem = function (fileItem, response, status, headers) {
        console.info('onCancelItem', fileItem, response, status, headers);
    };
    uploader.onCompleteItem = function (fileItem, response, status, headers) {
        console.info('onCompleteItem', fileItem, response, status, headers);
    };
    uploader.onCompleteAll = function () {
        console.info('onCompleteAll');
    };

    console.info('uploader', uploader);
}]);
angular.module('RDash').controller('ngCropUpload', ['$scope', 'Upload', '$timeout', function ($scope, Upload, $timeout) {
    $scope.upload = function (dataUrl, name) {
        Upload.upload({
            url: '/umbraco/api/FileApi/Upload',
            data: {
                file: Upload.dataUrltoBlob(dataUrl, name)
            },
        }).then(function (response) {
            $timeout(function () {
                $scope.result = response.data;
            });
        }, function (response) {
            if (response.status > 0) $scope.errorMsg = response.status
                + ': ' + response.data;
        }, function (evt) {
            $scope.progress = parseInt(100.0 * evt.loaded / evt.total);
        });
    }
}]);
angular.module('RDash').controller('AddAgentController', ['ngDialog', '$scope', 'fMembership', 'fMember', '$timeout', function (ngDialog, $scope, fMembership, fMember, $timeout) {
    //TODO Add Confirm Password block and 

    $scope.model = {};
    

    $scope.onSubmit = function (member) {

        if (vm.form.$valid) {
            vm.options.updateInitialValue();
            alert(JSON.stringify(vm.model), null, 2);
            ngDialog.close();
        }

        fMembership.AddAgent(fMember.email, angular.toJson(member));

    }


    $scope.existingUsers = [
        'john',
        'tyrion',
        'arya'
    ];

    $scope.getAgentMemberByEmail = function (email) {

        var agentMember = fMembership.GetMemberByEmail(email, angular.toJson(member))
        return agentMember;
    }




    $scope.fields = [
          {
              key: 'text',
              type: 'input-loader',
              templateOptions: {
                  label: 'Email',
                  placeholder: 'Email',
                  required: true,
                  onKeydown: function (value, options) {
                      options.validation.show = false;
                  },
                  onBlur: function (value, options) {
                      options.validation.show = null;
                  }
              },
              asyncValidators: {
                  uniqueUsername: {
                      expression: function ($viewValue, $modelValue, scope) {
                          scope.options.templateOptions.loading = true;
                          return $timeout(function () {
                              scope.options.templateOptions.loading = false;
                              //-----------Unpredictable Custom Code -------------------------------------------------------
                              if ($scope.getAgentMemberByEmail($viewValue) !== -1) {
                                throw new Error('taken')
                              }
                              //-----------Unpredictable Code -------------------------------------------------------
                              if ($scope.existingUsers.indexOf($viewValue) !== -1) {
                                  throw new Error('taken');
                              }
                          }, 1000);
                      },
                      message: '"This email is already taken."'
                  }
              },
              modelOptions: {
                  updateOn: 'blur'
              }
          }
    ];

    $scope.originalFields = angular.copy($scope.fields);

}]);

angular.module('RDash').factory("fMembership", function ($resource, $http, $q, toaster, ngDialog) {
    return {
        CurrentMemberAsync: $resource('/umbraco/api/members/GetCurrentMember', {}, {
            query: { method: 'GET', params: {}, isArray: false }
        }), 
        CurrentMember: function () {
            var defer = $q.defer();
            $http.get('/umbraco/api/members/GetCurrentMember', { cache: 'true' })
           .success(function (data) {

               defer.resolve(data);

           });
            
            return defer.promise;
        },

        UpdateMember: function (id, parameters) {
            $http.post('/umbraco/api/members/UpdateMember/' + id, parameters).
        success(function (data, status, headers, config) {

            toaster.pop('success', "", "Save Successfull");

        }).
       error(function (data, status, headers, config) {
           toaster.pop('error', "", "Error Update Member");
       });
        },

        GetMemberByEmail: function (email, parameters) {
            $http.post('/umbraco/api/members/GetMemberByEmail/' + email, parameters).
        success(function (data, status, headers, config) {
            
            toaster.pop('success', "", "Save Successfull");

        }).
       error(function (data, status, headers, config) {
           toaster.pop('error', "", "Error Update Member");
       });
        },

        ChangePassword: function (id, parameters) {

            $http.post('/umbraco/api/members/ChangePassword/' + id, parameters).
        success(function (data, status, headers, config) {


            toaster.pop('success', "", "Save Successfull");
            ngDialog.close();

        }).
       error(function (data, status, headers, config) {
           toaster.pop('error', "", "Error Update Member ->" + status);
       });
        },

        AddAgent: function (id, parameters) {

            $http.post('/umbraco/api/members/AddAgent/' + id, parameters).
        success(function (data, status, headers, config) {

            toaster.pop('success', "", "Save Successfull");
            ngDialog.close();

        }).
       error(function (data, status, headers, config) {
           toaster.pop('error', "", "Error Update Member ->" + status);
       });
        },

        UpdateMemberPassword: function (id, parameters) {
            $http.post('/umbraco/api/members/UpdateMemberPassword/' + id, parameters).
        success(function (data, status, headers, config) {


            toaster.pop('success', "", "Save Successfull");

        }).
       error(function (data, status, headers, config) {
           toaster.pop('error', "", "Error Update Member");
       });
        },

        countries: $resource('../data/countries.json', {}, {
            query: { method: 'GET', params: {}, isArray: false }
        })
    };
});

angular.module('RDash').factory('fMember', ['fMembership', function (fMembership, $scope) {


    var member = { Id: 0, Type: "" };
    fMembership.CurrentMember().then(function (data) {

        var _member = data;
        member.Id = _member.Id;
        member.Type = _member.ContentTypeAlias;
        member.Name = _member.Name;
        member.Username = _member.Username;
        // member.Properties = _member.Properties;
        var myarray = [];
        myarray = _member.Properties.$values;



        for (var i = 0; i < myarray.length; i++) {
            console.log(myarray[i].Alias + '->' + myarray[i].Value);
            var myObj = new Object;
            myObj[myarray[i].Alias] = myarray[i].Value;
            angular.extend(member, myObj)
        };



        return member;

    });

    return member;


}]);






angular.module('RDash').controller('PasswordChangeController', ['ngDialog', '$scope', 'fMembership', 'fMember', function (ngDialog, $scope, fMembership, fMember) {
    //TODO Add Confirm Password block and 

    $scope.member = {};
    $scope.submit = function (member) {

        fMembership.ChangePassword(fMember.Id, angular.toJson(member));

    }

    $scope.memberfields = [

      {
          key: 'password',
          type: 'input',
          templateOptions: {
              type: 'password',
              label: 'New Password',
              placeholder: 'Password'
          }
      },

    ]



}]);
angular.module('RDash').directive('upldr', function () {
    var directive = {

        scope: {

            Type: "@",
            NodeId: "@",
            PropertyAlias: "@",
            DataType: "@"

        },

        templateUrl: '/templates/FileUpload.html',
        restrict: 'E'
    };
    return directive;
});






angular.module('RDash').directive('modalview', function () {


    var directive = {
        scope: {
            memberkey: $scope.parent.memberkey,
            url: "=url"

        },


        templateUrl: url,
        restrict: 'E'
    };
    return directive;
});



angular.module('RDash').directive('modalviewbutton', function () {

    var directive = {

        scope: {

            Type: "=",
            NodeId: "=",
            PropertyAlias: "=",
            DataType: "="

        },

        templateUrl: '/templates/ModalView.html',
        restrict: 'E'
    };
    return directive;
});


angular.module('RDash').controller('ModalInstanceCtrl', function ($scope, $uibModalInstance, items) {
    debugger;
    $scope.items = items;
    $scope.selected = {
        item: $scope.items[0]
    };

    $scope.ok = function () {
        $uibModalInstance.close($scope.selected.item);
    };

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
});
angular.module('RDash').controller('ModalViewCtrl', function ($scope, $uibModal, $log) {



    $scope.items = { NodeId: $scope.NodeId, Type: $scope.Type, ProperyAlias: $scope.PropertyAlias, DataType: $scope.DataType }


    $scope.animationsEnabled = true;

    $scope.open = function (size) {

        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'ModalView.html',
            controller: 'ModalInstanceCtrl',
            size: size,
            resolve: {
                items: function () {
                    return $scope.items;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            $scope.selected = selectedItem;
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });
    };

    $scope.toggleAnimation = function () {
        $scope.animationsEnabled = !$scope.animationsEnabled;
    };

});
angular.module('RDash').directive('modaluploader', function () {
    var directive = {
        scope: {
            Type: "@type",
            NodeId: "@nodeid",
            PropertyAlias: "@propertyalias",
            DataType: "@datatype"

        },

        controller: 'ModalViewCtrl',
        templateUrl: '/templates/ModalFileUpload.html',
        restrict: 'E'
    };
    return directive;
});